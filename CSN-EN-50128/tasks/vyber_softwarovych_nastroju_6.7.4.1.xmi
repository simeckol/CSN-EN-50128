<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-UemRDhvZHcgbCbTEOP9REA" name=",_6zbSsCLjEemo7MfG6V_evw" guid="-UemRDhvZHcgbCbTEOP9REA" changeDate="2019-07-04T22:47:11.947+0200">
  <mainDescription>&lt;ul>&#xD;
    &lt;li>&#xD;
        Softwarové nástroje musí být vybrány tak, aby tvořily koherentní součást činností vývoje softwaru.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        POZNÁMKA Na podporu vývoje softwaru by měly být používány vhodné nástroje s cílem zvýšit integritu softwaru a to&#xD;
        snížením pravděpodobnosti vnesení nebo nezdetekování vad během vývoje. Příklady nástrojů relevantních etapám&#xD;
        životního cyklu vývoje softwaru zahrnují&lt;br />&#xD;
        a) transformační nebo překládací nástroje, které převádějí reprezentaci softwaru nebo návrhu (např. reprezentaci&#xD;
        textem nebo pomocí diagramů) z jedné úrovně abstrakce do jiné: nástroje pro zjemňování návrhu, překladače,&#xD;
        assemblery, linkery, bindery, loadery a nástroje generování kódu&lt;br />&#xD;
        b) verifikační a validační nástroje jako statické analyzátory kódu, nástroje měření pokrytí kódu testem, pomocné&#xD;
        nástroje pro důkaz teorémů, simulátory a nástroje kontroly modelů,&lt;br />&#xD;
        c) diagnostické nástroje používané k údržbě a monitorování softwaru v provozních podmínkách,&lt;br />&#xD;
        d) nástroje infrastruktury jako systémy podpory vývoje,&lt;br />&#xD;
        e) nástroje pro řízení konfigurace jako jsou např. nástroje pro řízení verzí,&lt;br />&#xD;
        f) nástroje aplikačních dat, které produkují nebo udržují data, která jsou vyžadována pro definování parametrů a&#xD;
        pro konfiguraci systému, např. funkčních parametrů, rozsahů nástrojů, úrovní alarmů a odpojování úrovní, výstupních&#xD;
        stavů, které jsou považovány za poruchu, geografického rozmístění.&lt;br />&#xD;
        Vybrané nástroje by měly být schopny spolupráce a to v tom smyslu, že výstupy jednoho nástroje mají vhodný obsah a&#xD;
        formát pro automatický vstup do následujícího nástroje a tak minimalizují možnost vnesení lidské chyby při&#xD;
        přepracovávání přechodných výsledků.&lt;br />&#xD;
        Nástroje musí být vybrány a musí být prokázáno, že jsou kompatibilní s potřebami aplikace.&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Musí se vzít v úvahu dostupnost vhodných nástrojů pro použití služeb, které jsou nezbytné po celou dobu životnosti&#xD;
        Softwaru. (6.7.4.1)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Výběr nástrojů ze tříd T2 a T3 musí být odůvodněný (viz 7.3.4.12). Toto zdůvodnění musí obsahovat identifikaci&#xD;
        potencionálních poruch, které mohou být vneseny do výstupů těchto nástrojů a opatření&amp;nbsp;k vyvarování se nebo k&#xD;
        zvládnutí těchto poruch. (6.7.4.2)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Všechny nástroje tříd T2 a T3 musí mít specifikaci nebo manuál, které jasně definují chování tohoto nástroje a&#xD;
        jakékoliv instrukce nebo omezení související s jejich použitím. (6.7.4.3)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Pro každý nástroj ze třídy T3 musí být dostupný důkaz, že výstup z tohoto nástroje odpovídá specifikaci na výstup&#xD;
        nebo že jsou poruchy ve výstupu detekované. Důkaz může být založen na stejných krocích nezbytných pro manuální&#xD;
        procesy, který by tento nástroj mohly nahradit a musí být předloženy argumenty pokud jsou tyto kroky nahrazeny&#xD;
        nějakými alternativami (např. validace nástroje). Důkaz může být také založen na&lt;br />&#xD;
        a) vhodné kombinaci dřívějších úspěšných použití v podobných prostředích a pro podobné aplikace (uvnitř organizace&#xD;
        nebo v jiných organizacích);&lt;br />&#xD;
        b) validaci nástroje, jak je specifikováno v 6.7.4.5;&lt;br />&#xD;
        c) diversifikovaném redundantním kódu, který umožní detekci a kontrolu poruch, vedoucích k vadám zaneseným&#xD;
        nástrojem;&lt;br />&#xD;
        d) vyhovění úrovni integrity bezpečnosti odvozené z analýzy rizika procesu a postupů zahrnujících tyto&#xD;
        nástroje;&lt;br />&#xD;
        e) dalších vhodných metodách pro vyvarování se nebo zvládnutí poruch vnesených těmito nástroji.&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;blockquote style=&quot;MARGIN-RIGHT: 0px&quot; dir=&quot;ltr&quot;>&#xD;
    &lt;p>&#xD;
        POZNÁMKA 1 Historie verzí může poskytnout záruku vyzrálosti nástroje a záznam chyb/nejasností spojených s jeho&#xD;
        použitím v daném prostředí.&lt;br />&#xD;
        POZNÁMKA 2 Důkaz uvedený pro nástroj třídy T3 může být také použit pro nástroje třídy T2 při rozhodování o&#xD;
        správnosti jejich výsledků. (6.7.4.4)&#xD;
    &lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        Jestliže není k dispozici důkaz shody dle 6.7.4.4 pak musí existovat účinná opatření ke kontrole chyb spustitelného&#xD;
        bezpečnostně relevantního softwaru vyplývajících z vad, které lze připsat danému nástroji.&lt;br />&#xD;
        POZNÁMKA 1 Příkladem je generování diversifikovaného redundantního kódu, který umožňuje detekci a kontrolu chyb,&#xD;
        které vedou k vadám vneseným překladačem.&lt;br />&#xD;
        POZNÁMKA 2 Jako příklad, vhodnost použití nedůvěryhodného kompilátoru může být odůvodněno následovně:&lt;br />&#xD;
        Strojový kód vytvořený kompilátorem byl vystaven kombinaci testů, kontrol a analýz, které jsou schopny prokázat&#xD;
        správnost kódu do té míry, že je to v souladu s cílovou úrovní integrity bezpečnosti. Pro všechny testy, kontroly a&#xD;
        analýzy platí zejména následující:&lt;br />&#xD;
        - Je prokázáno, že testování pokrývá dostatečně velkou část implementovaného kódu. Jestliže existuje nějaká část&#xD;
        kódu, která není dosažitelná testem, pak musí být kontrolami nebo analýzou prokázáno, že zamýšlená funkce je&#xD;
        prováděna správně i ve chvílích, kdy je dosaženo této části kódu.&lt;br />&#xD;
        - Na strojový kód jsou uplatněny kontroly a analýzy, které prokazují, že jsou schopny detektovat ty druhy chyb,&#xD;
        které by mohly vyplývat z vad kompilátoru.&lt;br />&#xD;
        - Po těchto testech, kontrolách a analýzách již pomocí kompilátoru nebyly prováděny žádné další překlady.&lt;br />&#xD;
        - Jestliže bude potřeba kompilátorem provést další kompilaci nebo překlad, pak všechny kontroly a analýzy se&#xD;
        zopakují. (6.7.4.6)&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        Vybraná reprezentace softwaru nebo návrhu (včetně programovacího jazyka) musí:&lt;br />&#xD;
        a) mít překladač, který byl vyhodnocen jako vhodný pro daný účel včetně, pokud je to vhodné, vyhodnocení proti&#xD;
        mezinárodním nebo národním normám;&lt;br />&#xD;
        b) odpovídat vlastnostem aplikace;&lt;br />&#xD;
        c) obsahovat funkce, které usnadní detekci chyb návrhu nebo chyb při programování;&lt;br />&#xD;
        d) podporovat funkce, které odpovídají metodě návrhu.&lt;br />&#xD;
        Programovací jazyk je jednou ze tříd reprezentací softwaru nebo návrhu. Překladač převádí reprezentaci softwaru&#xD;
        nebo návrhu (např. text nebo diagram) z jedné úrovně abstrakce na jinou. Příklady překladačů zahrnují: nástroje pro&#xD;
        zjemnění návrhu, kompilery, assemblery, linkery, bindery, zavaděče a nástroje pro generování kódu.&lt;br />&#xD;
        Vyhodnocení překladače může být provedeno pro konkrétní aplikační projekt nebo pro třídu aplikací. V druhém případě&#xD;
        musí být uživateli nástroje dostupné všechny nezbytné informace týkající se zamýšleného a vhodného použití&#xD;
        nástroje. Vyhodnocení nástroje pro konkrétní projekt může být potom omezeno na kontrolu obecné vhodnosti nástroje&#xD;
        pro projekt a shody se specifikací či manuálem (tedy řádné použití nástroje). Řádné použití nástroje může zahrnovat&#xD;
        dodatečné verifikační činnosti v rámci konkrétního projektu.&lt;br />&#xD;
        Validační proces může být použit pro vyhodnocení vhodnosti překladače pro daný účel ve shodě s definovanými&#xD;
        kritérii, která musí zahrnovat funkční a nefunkční požadavky. Pro funkční požadavky na překladač může být hlavní&#xD;
        validační technikou dynamické testování. Jestliže je to možné, musí být použit proces automatického testování.&#xD;
        (6.7.4.7)&#xD;
    &lt;/li>&#xD;
&lt;/ul></mainDescription>
</org.eclipse.epf.uma:TaskDescription>
